import 'dart:io';
import 'package:meta/meta.dart';
import 'package:supabase_codegen/src/generator/generator.dart';

/// Dart comment prefix
const String _dartCommentPrefix = '///';

/// Comment prefix
String _commentPrefix = _dartCommentPrefix;

/// Date line prefix
String get _dateLinePrefix => '$_commentPrefix Date:';

/// Regex to match the date line
final _dateRegex = RegExp('$_dateLinePrefix .*\n');

/// Write the file header
///
/// - [skipIgnore] (default: false):  should the dart analysis
/// ignore_for_file directive be skipped
/// - [commentPrefix] (default: ///): Prefix to be used for comment lines
///
void writeHeader(
  StringBuffer buffer, {
  bool skipIgnore = false,
  String commentPrefix = _dartCommentPrefix,
}) {
  buffer
    ..writeln(commentPrefix)
    ..writeln('$commentPrefix  Generated file. Do not edit.')
    ..writeln('$commentPrefix  Generated by $packageName ($version)');

  /// Add ignore for dart analysis
  if (!skipIgnore) {
    buffer
      ..writeln(commentPrefix)
      ..writeln('$commentPrefix ignore_for_file: require_trailing_commas, '
          'constant_identifier_names');
  }
  buffer.writeln(commentPrefix);
}

/// Write the file footer
void writeFooter(
  StringBuffer buffer, {
  String commentPrefix = _dartCommentPrefix,
}) {
  _commentPrefix = commentPrefix;

  // Write tag
  if (tag.isNotEmpty) {
    buffer.writeln('$_commentPrefix Tag: $tag');
  }

  // Write date (if not skipping footer)
  if (skipFooterWrite) return;

  buffer.writeln('$_dateLinePrefix ${DateTime.now()}');
}

/// Strip the date line from the content for comparison
@visibleForTesting
String stripDateLine(String content) {
  return content.replaceAll(_dateRegex, '');
}

/// Write the file if the content has changed,
/// ignoring the date line
void writeFileIfChangedIgnoringDate(File file, StringBuffer buffer) {
  final newContent = buffer.toString();
  final newContentStripped = stripDateLine(newContent);

  if (file.existsSync()) {
    final existingContent = file.readAsStringSync();
    final existingContentStripped = stripDateLine(existingContent);

    if (newContentStripped != existingContentStripped) {
      file.writeAsStringSync(newContent);
    }
  } else {
    file.writeAsStringSync(newContent);
  }
}
