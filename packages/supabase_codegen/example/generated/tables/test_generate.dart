//
//  Generated file. Do not edit.
//  Generated by supabase_codegen (1.3.0)
//
// ignore_for_file: require_trailing_commas, constant_identifier_names, depend_on_referenced_packages

import 'package:supabase_codegen/supabase_codegen.dart';
// Import enums if needed
// ignore: unused_import, always_use_package_imports
import '../database.dart';

/// Test Generate Table
class TestGenerateTable extends SupabaseTable<TestGenerateRow> {
  /// Table Name
  @override
  String get tableName => 'test_generate';

  /// Create a [TestGenerateRow] from the [data] provided
  @override
  TestGenerateRow createRow(Map<String, dynamic> data) =>
      TestGenerateRow.fromJson(data);
}

/// Test Generate Row
class TestGenerateRow extends SupabaseDataRow {
  /// Test Generate Row
  TestGenerateRow({
    required String isNotNullable,
    String? id,
    DateTime? createdAt,
    String? isNullable,
    List<String>? isArray,
    int? isInt,
    double? isDouble,
    bool? isBool,
    Map<String, dynamic>? isJson,
    String? isString,
    String? dateCol,
    DateTime? timestamp,
    List<int>? numArray,
  }) : super({
         'is_not_nullable': supaSerialize(isNotNullable),
         if (id != null) 'id': supaSerialize(id),
         if (createdAt != null) 'created_at': supaSerialize(createdAt),
         if (isNullable != null) 'is_nullable': supaSerialize(isNullable),
         if (isArray != null) 'is_array': supaSerialize(isArray),
         if (isInt != null) 'is_int': supaSerialize(isInt),
         if (isDouble != null) 'is_double': supaSerialize(isDouble),
         if (isBool != null) 'is_bool': supaSerialize(isBool),
         if (isJson != null) 'is_json': supaSerialize(isJson),
         if (isString != null) 'is_string': supaSerialize(isString),
         if (dateCol != null) 'date_col': supaSerialize(dateCol),
         if (timestamp != null) 'timestamp': supaSerialize(timestamp),
         if (numArray != null) 'num_array': supaSerialize(numArray),
       });

  /// Test Generate Row
  const TestGenerateRow._(super.data);

  /// Create Test Generate Row from a [data] map
  factory TestGenerateRow.fromJson(Map<String, dynamic> data) =>
      TestGenerateRow._(data.cleaned);

  /// Get the Json representation of the row
  Map<String, dynamic> toJson() => data;

  /// Get the [SupabaseTable] for this row
  @override
  SupabaseTable get table => TestGenerateTable();

  /// Id field name
  static const String idField = 'id';

  /// Id
  String get id => getField<String>(idField, defaultValue: '')!;
  set id(String value) => setField<String>(idField, value);

  /// Created At field name
  static const String createdAtField = 'created_at';

  /// Created At
  DateTime get createdAt =>
      getField<DateTime>(createdAtField, defaultValue: DateTime.now())!;
  set createdAt(DateTime value) => setField<DateTime>(createdAtField, value);

  /// Is Nullable field name
  static const String isNullableField = 'is_nullable';

  /// Is Nullable
  String? get isNullable => getField<String>(isNullableField);
  set isNullable(String? value) => setField<String>(isNullableField, value);

  /// Is Array field name
  static const String isArrayField = 'is_array';

  /// Is Array
  List<String> get isArray => getListField<String>(
    isArrayField,
    defaultValue: const <String>['a', 'b'],
  );
  set isArray(List<String>? value) => setListField<String>(isArrayField, value);

  /// Is Not Nullable field name
  static const String isNotNullableField = 'is_not_nullable';

  /// Is Not Nullable
  String get isNotNullable => getField<String>(isNotNullableField)!;
  set isNotNullable(String value) =>
      setField<String>(isNotNullableField, value);

  /// Is Int field name
  static const String isIntField = 'is_int';

  /// Is Int
  int get isInt => getField<int>(isIntField, defaultValue: 1)!;
  set isInt(int value) => setField<int>(isIntField, value);

  /// Is Double field name
  static const String isDoubleField = 'is_double';

  /// Is Double
  double get isDouble => getField<double>(isDoubleField, defaultValue: 0.1)!;
  set isDouble(double value) => setField<double>(isDoubleField, value);

  /// Is Bool field name
  static const String isBoolField = 'is_bool';

  /// Is Bool
  bool get isBool => getField<bool>(isBoolField, defaultValue: true)!;
  set isBool(bool value) => setField<bool>(isBoolField, value);

  /// Is Json field name
  static const String isJsonField = 'is_json';

  /// Is Json
  Map<String, dynamic> get isJson =>
      getField<Map<String, dynamic>>(isJsonField, defaultValue: {'test': 1})!;
  set isJson(Map<String, dynamic> value) =>
      setField<Map<String, dynamic>>(isJsonField, value);

  /// Is String field name
  static const String isStringField = 'is_string';

  /// Is String
  String get isString => getField<String>(isStringField, defaultValue: 'N/A')!;
  set isString(String value) => setField<String>(isStringField, value);

  /// Date Col field name
  static const String dateColField = 'date_col';

  /// Date Col
  String get dateCol =>
      getField<String>(dateColField, defaultValue: '2001-01-01')!;
  set dateCol(String value) => setField<String>(dateColField, value);

  /// Timestamp field name
  static const String timestampField = 'timestamp';

  /// Timestamp
  DateTime get timestamp =>
      getField<DateTime>(
        timestampField,
        defaultValue: DateTime.parse('2001-01-01 00:00:00+00'),
      )!;
  set timestamp(DateTime value) => setField<DateTime>(timestampField, value);

  /// Num Array field name
  static const String numArrayField = 'num_array';

  /// Num Array
  List<int> get numArray =>
      getListField<int>(numArrayField, defaultValue: const <int>[1, 2]);
  set numArray(List<int>? value) => setListField<int>(numArrayField, value);

  /// Make a copy of the current [TestGenerateRow]
  /// overriding the provided fields
  TestGenerateRow copyWith({
    String? isNotNullable,
    String? id,
    DateTime? createdAt,
    String? isNullable,
    List<String>? isArray,
    int? isInt,
    double? isDouble,
    bool? isBool,
    Map<String, dynamic>? isJson,
    String? isString,
    String? dateCol,
    DateTime? timestamp,
    List<int>? numArray,
  }) => TestGenerateRow.fromJson({
    'is_not_nullable': supaSerialize(isNotNullable) ?? data['is_not_nullable'],
    'id': supaSerialize(id) ?? data['id'],
    'created_at': supaSerialize(createdAt) ?? data['created_at'],
    'is_nullable': supaSerialize(isNullable) ?? data['is_nullable'],
    'is_array': supaSerialize(isArray) ?? data['is_array'],
    'is_int': supaSerialize(isInt) ?? data['is_int'],
    'is_double': supaSerialize(isDouble) ?? data['is_double'],
    'is_bool': supaSerialize(isBool) ?? data['is_bool'],
    'is_json': supaSerialize(isJson) ?? data['is_json'],
    'is_string': supaSerialize(isString) ?? data['is_string'],
    'date_col': supaSerialize(dateCol) ?? data['date_col'],
    'timestamp': supaSerialize(timestamp) ?? data['timestamp'],
    'num_array': supaSerialize(numArray) ?? data['num_array'],
  });
}

/// Date: 2025-04-13 19:48:58.871272
