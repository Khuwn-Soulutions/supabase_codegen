import 'package:supabase_codegen/src/generator/generator.dart';
import 'package:test/test.dart';

void main() {
  var buffer = StringBuffer();

  setUp(() {
    buffer = StringBuffer();
    skipFooterWrite = false;
  });

  tearDown(buffer.clear);

  group('writeHeader and writeFooter', () {
    test('writeHeader writes correct header', () {
      writeHeader(buffer);
      expect(buffer.toString(), contains('//'));
      expect(buffer.toString(), contains('Generated file. Do not edit.'));
      expect(buffer.toString(), contains('Generated by supabase_codegen'));
      expect(buffer.toString(), contains(version));
      expect(
        buffer.toString(),
        contains('// ignore_for_file: require_trailing_commas, '
            'constant_identifier_names'),
      );
    });

    group('writeFooter writes', () {
      test('correct footer with tag', () {
        tag = 'test_tag';
        writeFooter(buffer);
        expect(buffer.toString(), contains('Tag: test_tag'));
      });

      test('correct footer without tag', () {
        tag = '';
        writeFooter(buffer);
        expect(buffer.toString(), isNot(contains('Tag:')));
      });

      group('when skipFooter is true', () {
        setUp(() {
          skipFooterWrite = true;
        });
        test('no date', () {
          writeFooter(buffer);
          expect(buffer.toString(), isEmpty);
        });
        test('tag if provided', () {
          tag = 'test_tag';
          writeFooter(buffer);
          expect(buffer.toString(), contains('Tag: test_tag'));
        });
      });

      test('date when skipFooter is false', () {
        writeFooter(buffer);
        expect(buffer.toString(), isNotEmpty);
        expect(buffer.toString(), contains('Date:'));
      });
    });
  });
}
