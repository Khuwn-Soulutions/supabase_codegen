import 'dart:io';

import 'package:supabase_codegen/src/generator/generator.dart';
import 'package:test/test.dart';

void main() {
  setUp(() {
    skipFooterWrite = false;
  });

  group('writeHeader and writeFooter', () {
    test('writeHeader writes correct header', () {
      final buffer = StringBuffer();
      writeHeader(buffer);
      expect(buffer.toString(), contains('//'));
      expect(buffer.toString(), contains('Generated file. Do not edit.'));
      expect(buffer.toString(), contains('Generated by supabase_codegen'));
      expect(buffer.toString(), contains(version));
      expect(
        buffer.toString(),
        contains('// ignore_for_file: require_trailing_commas, '
            'constant_identifier_names'),
      );
    });

    group('writeFooter writes', () {
      test('correct footer with tag', () {
        final buffer = StringBuffer();
        tag = 'test_tag';
        writeFooter(buffer);
        expect(buffer.toString(), contains('Tag: test_tag'));
      });

      test('correct footer without tag', () {
        final buffer = StringBuffer();
        tag = '';
        writeFooter(buffer);
        expect(buffer.toString(), isNot(contains('Tag:')));
      });

      group('when skipFooter is true', () {
        setUp(() {
          skipFooterWrite = true;
        });
        test('no date', () {
          final buffer = StringBuffer();
          tag = '';
          writeFooter(buffer);
          expect(buffer.toString(), isEmpty);
        });
        test('tag if provided', () {
          final buffer = StringBuffer();
          tag = 'test_tag';
          writeFooter(buffer);
          expect(buffer.toString(), contains('Tag: test_tag'));
        });
      });

      test('date when skipFooter is false', () {
        final buffer = StringBuffer();
        writeFooter(buffer);
        expect(buffer.toString(), isNotEmpty);
        expect(buffer.toString(), contains('Date:'));
      });
    });

    group('writeFileIfChangedIgnoringDate', () {
      /// Setup the file and buffer for testing
      (File, StringBuffer) setupFileAndBuffer() {
        final timestamp = DateTime.now().millisecondsSinceEpoch;
        final file = File('test_output_$timestamp.dart');
        final buffer = StringBuffer();
        writeHeader(buffer);
        writeFooter(buffer);
        return (file, buffer);
      }

      test('writes new file if it does not exist', () {
        final (file, buffer) = setupFileAndBuffer();
        writeFileIfChangedIgnoringDate(file, buffer);
        expect(file.existsSync(), isTrue);
        final content = file.readAsStringSync();
        expect(content, contains('Generated file. Do not edit.'));
        file.deleteSync();
      });

      test('does not rewrite file if content is the same ignoring date', () {
        final (file, buffer) = setupFileAndBuffer();
        writeFileIfChangedIgnoringDate(file, buffer);
        final initialContent = stripDateLine(file.readAsStringSync());

        final buffer2 = StringBuffer();
        writeHeader(buffer2);
        writeFooter(buffer2);
        writeFileIfChangedIgnoringDate(file, buffer2);
        final secondContent = stripDateLine(file.readAsStringSync());

        expect(initialContent, equals(secondContent));
        file.deleteSync();
      });

      test('rewrites file if content differs ignoring date', () {
        final (file, buffer1) = setupFileAndBuffer();
        writeFileIfChangedIgnoringDate(file, buffer1);
        final initialContent = stripDateLine(file.readAsStringSync());

        final buffer2 = StringBuffer();
        writeHeader(buffer2);
        buffer2.writeln('// Additional line to change content');
        writeFooter(buffer2);
        writeFileIfChangedIgnoringDate(file, buffer2);
        final secondContent = stripDateLine(file.readAsStringSync());

        expect(initialContent, isNot(equals(secondContent)));
        file.deleteSync();
      });
    });
  });
}
